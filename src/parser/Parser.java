/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;
import java.util.TreeMap;
import java.awt.Color;
import automat.*;
import rules.*;

/**
* Parser for the script language.
* @author Wolfgang Bongartz
*/
public class Parser implements ParserConstants {
  /**
  * Constructor.
  * @param s Script to be parsed.
  */
  public Parser(String s)
  {
    this (new java.io.StringReader(s));
  }

  /**
  * Re-initialize the parser.
  * @param s Script to be parsed.
  */
  public void ReInit(String s)
  {
    ReInit(new java.io.StringReader(s));
  }

  final public CellularAutomat ca_definition() throws ParseException {
  CellularAutomat ca = new CellularAutomat();
  Habitat h = null;
  Inhabitant it = null;
  Rule r = null;
  int population=0;
    jj_consume_token(CELLULAR);
    jj_consume_token(AUTOMAT);
    jj_consume_token(S_OB);
    h = habitat_definition();
                             ca.setHabitat(h);
    if (jj_2_1(3)) {
      jj_consume_token(POPULATE);
      jj_consume_token(46);
      population = percentage_value();
    } else {
      ;
    }
    label_1:
    while (true) {
      it = inhabitant_template_definition();
                                            ca.addInhabitantTemplate(it);
      if (jj_2_2(3)) {
        ;
      } else {
        break label_1;
      }
    }
    label_2:
    while (true) {
      r = rule_definition();
                            ca.addRule(r);
      if (jj_2_3(3)) {
        ;
      } else {
        break label_2;
      }
    }
    jj_consume_token(S_CB);
    if(population > 0)
    {
                ca.populateRandomly(population);
    }
    return ca;
  }

  final public Habitat habitat_definition() throws ParseException {
  boolean e=true;
  int width=0, height=0;
    jj_consume_token(HABITAT);
    jj_consume_token(S_OB);
    label_3:
    while (true) {
      if (jj_2_4(3)) {
        ;
      } else {
        break label_3;
      }
      if (jj_2_7(3)) {
        jj_consume_token(WIDTH);
        jj_consume_token(46);
        width = number_value();
      } else if (jj_2_8(3)) {
        jj_consume_token(HEIGHT);
        jj_consume_token(46);
        height = number_value();
      } else if (jj_2_9(3)) {
        jj_consume_token(ENVIRONMENT);
        jj_consume_token(46);
        if (jj_2_5(3)) {
          jj_consume_token(MOORE);
                                   e=true;
        } else if (jj_2_6(3)) {
          jj_consume_token(NEUMANN);
                                                         e=false;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(S_CB);
    Habitat h = new Habitat(width, height, e);
    return h;
  }

  final public Inhabitant inhabitant_template_definition() throws ParseException {
  String species;
  TreeMap <String, Integer> al=null;
  Color c=Color.BLACK;
    jj_consume_token(INHABITANT);
    jj_consume_token(TEMPLATE);
    species = identifier();
    jj_consume_token(S_OB);
    if (jj_2_10(3)) {
      al = attribute_list();
    } else {
      ;
    }
    jj_consume_token(S_CB);
    if (jj_2_11(3)) {
      jj_consume_token(IS);
      c = color_value();
    } else {
      ;
    }
    Inhabitant i = new Inhabitant(species, al, c);
    return i;
  }

  final public Rule rule_definition() throws ParseException {
  Evaluable e;
  Command c;
    jj_consume_token(IF);
    e = expression();
    jj_consume_token(THEN);
    c = command();
    jj_consume_token(S_END);
    Rule r = new Rule(e, c);
    return r;
  }

  final public TreeMap < String, Integer > attribute_list() throws ParseException {
  TreeMap < String, Integer > tm = new TreeMap < String, Integer > ();
  String key;
  Integer value;
    label_4:
    while (true) {
      key = identifier();
      jj_consume_token(46);
      value = number_value();
      jj_consume_token(S_END);
                                                      tm.put(key, value);
      if (jj_2_12(3)) {
        ;
      } else {
        break label_4;
      }
    }
    return tm;
  }

  final public Evaluable expression() throws ParseException {
  Evaluable l=null, r=null;
  Operation op=null;
  Evaluable rv;
    if (jj_2_14(3)) {
      l = exp();
      if (jj_2_13(3)) {
        op = op();
        r = exp();
      } else {
        ;
      }
      if(op==null)
      {
        rv=l;
      } else
      {
        op.setOperands(l,r);
        rv=op;
      }
    } else if (jj_2_15(3)) {
      jj_consume_token(NOT);
      l = exp();
                       rv = new NotExpression(l);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    return rv;
  }

  final public Evaluable exp() throws ParseException {
  String s;
  int i;
  boolean b;
  Evaluable f, rv;
    if (jj_2_16(3)) {
      b = boolean_value();
                       rv = new ConstExpression(b);
    } else if (jj_2_17(3)) {
      i = number_value();
                           rv = new Skalar(i);
    } else if (jj_2_18(3)) {
      f = function_call();
                       rv = f;
    } else if (jj_2_19(3)) {
      s = identifier();
                       rv = new GetValueFunction(s);
    } else if (jj_2_20(3)) {
      jj_consume_token(S_OB);
      rv = expression();
      jj_consume_token(S_CB);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     return rv;
  }

  final public Operation op() throws ParseException {
  Operation op;
    if (jj_2_21(3)) {
      jj_consume_token(AND);
          op = new AndExpression();
    } else if (jj_2_22(3)) {
      jj_consume_token(OR);
          op = new OrExpression();
    } else if (jj_2_23(3)) {
      jj_consume_token(XOR);
          op = new XorExpression();
    } else if (jj_2_24(3)) {
      jj_consume_token(OP_EQUAL);
               op = new EqualsExpression();
    } else if (jj_2_25(3)) {
      jj_consume_token(OP_LESS_OR_EQUAL);
                       op = new LessThanOrEqualExpression();
    } else if (jj_2_26(3)) {
      jj_consume_token(OP_MORE_OR_EQUAL);
                       op = new MoreThanOrEqualExpression();
    } else if (jj_2_27(3)) {
      jj_consume_token(OP_LESS);
              op = new LessThanExpression();
    } else if (jj_2_28(3)) {
      jj_consume_token(OP_MORE);
              op = new MoreThanExpression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      return op;
  }

  final public Command command() throws ParseException {
  String r, v, p=null;
  int n;
    if (jj_2_31(3)) {
      jj_consume_token(ACT_KILL);
      jj_consume_token(S_OB);
      if (jj_2_29(3)) {
        p = identifier();
      } else {
        ;
      }
      jj_consume_token(S_CB);
                                                   return new KillCommand(p);
    } else if (jj_2_32(3)) {
      jj_consume_token(ACT_CREATE);
      jj_consume_token(S_OB);
      if (jj_2_30(3)) {
        p = identifier();
      } else {
        ;
      }
      jj_consume_token(S_CB);
                                                   return new CreateCommand(p);
    } else if (jj_2_33(3)) {
      jj_consume_token(ACT_ADD);
      jj_consume_token(S_OB);
      p = identifier();
      jj_consume_token(47);
      n = number_value();
      jj_consume_token(S_CB);
                                                                    return new AddCommand(p, n);
    } else if (jj_2_34(3)) {
      jj_consume_token(ACT_DEPLOY);
      jj_consume_token(S_OB);
      r = identifier();
      jj_consume_token(47);
      v = identifier();
      jj_consume_token(S_CB);
                                                                 return new DeployCommand(r, v);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Evaluable function_call() throws ParseException {
  String p=null;
    if (jj_2_38(3)) {
      jj_consume_token(FCT_COUNT);
      jj_consume_token(S_OB);
      if (jj_2_35(3)) {
        p = identifier();
      } else {
        ;
      }
      jj_consume_token(S_CB);
                                                     return new CountFunction(p);
    } else if (jj_2_39(3)) {
      jj_consume_token(FCT_GETVALUE);
      jj_consume_token(S_OB);
      if (jj_2_36(3)) {
        p = identifier();
      } else {
        ;
      }
      jj_consume_token(S_CB);
                                                     return new GetValueFunction(p);
    } else if (jj_2_40(3)) {
      jj_consume_token(FCT_CHECK);
      jj_consume_token(S_OB);
      if (jj_2_37(3)) {
        p = identifier();
      } else {
        ;
      }
      jj_consume_token(S_CB);
                                                    return new CheckFunction(p);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public int number_value() throws ParseException {
  Token t;
    t = jj_consume_token(NUMBER);
    return Integer.parseInt(t.image);
  }

  final public boolean boolean_value() throws ParseException {
  boolean rv;
    if (jj_2_41(3)) {
      jj_consume_token(TRUE);
                   rv=true;
    } else if (jj_2_42(3)) {
      jj_consume_token(FALSE);
                                          rv=false;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    return rv;
  }

  final public String identifier() throws ParseException {
  String s="";
  Token t;
    t = jj_consume_token(IDENTIFIER);
            s = t.image;
            s = s.substring(0,s.length());
    return s;
  }

  final public int percentage_value() throws ParseException {
  Token t;
    t = jj_consume_token(NUMBER);
    jj_consume_token(48);
    return Integer.parseInt(t.image);
  }

  final public Color color_value() throws ParseException {
    if (jj_2_43(3)) {
      jj_consume_token(BLACK);
              return Color.BLACK;
    } else if (jj_2_44(3)) {
      jj_consume_token(BLUE);
              return Color.BLUE;
    } else if (jj_2_45(3)) {
      jj_consume_token(RED);
              return Color.RED;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_3R_6() {
    if (jj_scan_token(INHABITANT)) return true;
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(OP_MORE)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(OP_LESS)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(IS)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(OP_MORE_OR_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(OP_LESS_OR_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(OP_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(RED)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(BLUE)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(BLACK)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(ENVIRONMENT)) return true;
    if (jj_scan_token(46)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(HEIGHT)) return true;
    if (jj_scan_token(46)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(WIDTH)) return true;
    if (jj_scan_token(46)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(S_OB)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(S_CB)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_12()) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(POPULATE)) return true;
    if (jj_scan_token(46)) return true;
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_13()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(46)) return true;
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    if (jj_3_12()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(NEUMANN)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(FCT_CHECK)) return true;
    if (jj_scan_token(S_OB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    if (jj_scan_token(S_CB)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(FCT_GETVALUE)) return true;
    if (jj_scan_token(S_OB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    if (jj_scan_token(S_CB)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(FCT_COUNT)) return true;
    if (jj_scan_token(S_OB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    if (jj_scan_token(S_CB)) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(THEN)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(ACT_DEPLOY)) return true;
    if (jj_scan_token(S_OB)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(ACT_ADD)) return true;
    if (jj_scan_token(S_OB)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(ACT_CREATE)) return true;
    if (jj_scan_token(S_OB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    if (jj_scan_token(S_CB)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(ACT_KILL)) return true;
    if (jj_scan_token(S_OB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    if (jj_scan_token(S_CB)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(MOORE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
//  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[45];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
//    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    //jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
//    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    //jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    //jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    //jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    //jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error {

  private static final long serialVersionUID = 3621593468214860504L; }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    //jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

//  private int jj_ntk() {
//    if ((jj_nt=token.next) == null)
//      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
//    else
//      return (jj_ntk = jj_nt.kind);
//  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 45; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
